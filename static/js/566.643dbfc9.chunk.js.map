{"version":3,"file":"static/js/566.643dbfc9.chunk.js","mappings":"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","sources":["components/Notifications/Notifications.styled.js","components/Notifications/Notifications.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/fetchMovieCredits.js","pages/CastPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const NoticeContainer = styled.div`\n  background-color: rgba(255, 255, 255, 1);\n  color: var(--accent-color);\n  padding: 20px;\n  margin: 20px auto;\n  width: 600px;\n  text-align: center;\n  /* border: 3px solid var(--accent-color); */\n  /* border-radius: 20px; */\n`;\n\nexport const NoticeText = styled.p`\n  text-transform: uppercase;\n  font-weight: bold;\n`;\n","import { NoticeContainer, NoticeText } from './Notifications.styled';\n\nexport const NotificationsReviews = () => {\n  return (\n    <NoticeContainer>\n      <NoticeText>This movie don't have any reviews</NoticeText>\n    </NoticeContainer>\n  );\n};\n\nexport const NotificationsCast = () => {\n  return (\n    <NoticeContainer>\n      <NoticeText>We did not find any information about the actors</NoticeText>\n    </NoticeContainer>\n  );\n};\n","import styled from 'styled-components';\n\nexport const MainContainer = styled.div`\n  padding: 20px;\n  margin: 20px auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 300px;\n  width: 100vh;\n  background-color: rgba(255, 255, 255, 1);\n  box-shadow: 0 0 15px var(--first-color-dark);\n\n  /* border: 3px solid var(--accent-color); */\n  /* border-radius: 20px; */\n`;\n\nexport const WindowS = styled.div`\n  margin: 10px;\n  height: 300px;\n  width: 100vh;\n  overflow: hidden;\n`;\n\nexport const AllPageContainer = styled.div`\n  height: 350px;\n  display: flex;\n  transition: translate;\n  transition-property: transform;\n  transition-duration: 300ms;\n  transition-timing-function: ease-in-out;\n`;\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: no-wrap;\n  justify-content: center;\n  /* background-color: rgba(255, 255, 255, 0.5); */\n  padding: 20px;\n  /* border-bottom: 3px solid var(--accent-color);\n  border-top: 3px solid var(--accent-color); */\n`;\n\nexport const CastItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  list-style: none;\n  align-items: center;\n  margin: 10px;\n`;\n\nexport const Poster = styled.img`\n  min-height: 100px;\n  width: 100px;\n`;\n\nexport const NameText = styled.p`\n  text-align: center;\n`;\n","import PropTypes from 'prop-types';\nimport { FaChevronLeft, FaChevronRight } from 'react-icons/fa';\nimport { useState, useEffect, cloneElement } from 'react';\n// import { useLocation } from 'react-router-dom';\nimport {\n  CastList,\n  CastItem,\n  Poster,\n  NameText,\n  MainContainer,\n  WindowS,\n  AllPageContainer,\n} from './Cast.styled';\nimport noPhoto from '../../img/no-photo.jpg';\n\nconst PAGE_WIDTH = 600;\n\nconst Cast = ({ actors }) => {\n  const [pages, setPages] = useState([]);\n  const [offset, setOffset] = useState(0);\n  // const location = useLocation();\n  // console.log(location);\n\n  useEffect(() => {\n    setPages(\n      actors.map(actor => {\n        return cloneElement(actor);\n      })\n    );\n  }, [actors]);\n\n  const handleLeftArrowClick = () => {\n    setOffset(currentOffset => {\n      const newOffset = currentOffset + PAGE_WIDTH;\n\n      return Math.min(newOffset, 0);\n    });\n  };\n  const handleRightArrowClick = () => {\n    setOffset(currentOffset => {\n      const newOffset = currentOffset - PAGE_WIDTH;\n      const maxOffset = -(PAGE_WIDTH * (pages.length - 1));\n      return Math.max(newOffset, maxOffset);\n    });\n  };\n\n  return (\n    <MainContainer>\n      <FaChevronLeft onClick={handleLeftArrowClick} />\n      <WindowS>\n        <AllPageContainer style={{ transform: `translate(${offset}px)` }}>\n          <CastList>\n            {actors.map(({ id, name, photo }) => {\n              return (\n                <CastItem key={id}>\n                  <Poster\n                    src={\n                      photo\n                        ? `https://image.tmdb.org/t/p/w500/${photo}`\n                        : noPhoto\n                    }\n                    alt=\"name\"\n                    height=\"150px\"\n                  />\n                  <NameText>{name}</NameText>\n                </CastItem>\n              );\n            })}\n          </CastList>\n        </AllPageContainer>\n      </WindowS>\n      <FaChevronRight onClick={handleRightArrowClick} />\n    </MainContainer>\n  );\n};\n\nCast.prototype = {\n  actors: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      name: PropTypes.string,\n      photo: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst KEY = 'd2e94e48e038eb54fbcf63f3b797b0c5';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport async function fetchMovieCredits(movieId) {\n  const response = await axios(`movie/${movieId}/credits`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  const fetchMovieCredits = response.data;\n  // console.log(fetchMovieCredits);\n\n  return fetchMovieCredits;\n}\n","import Cast from 'components/Cast/Cast';\nimport { fetchMovieCredits } from 'services/fetchMovieCredits';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { NotificationsCast } from 'components/Notifications/Notifications';\n\nconst CastPage = () => {\n  const [actors, setActors] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    fetchMovieCredits(movieId).then(({ cast }) => {\n      const actorsArr = [];\n\n      cast.map(({ id, name, profile_path }) => {\n        const actor = {\n          id,\n          name,\n          photo: profile_path,\n        };\n\n        return actorsArr.push(actor);\n      });\n\n      setActors(actorsArr);\n    });\n  }, [movieId]);\n\n  return actors && actors.length > 0 ? (\n    <Cast actors={actors} />\n  ) : (\n    <NotificationsCast />\n  );\n};\n\nexport default CastPage;\n"],"names":["NoticeContainer","styled","NoticeText","NotificationsReviews","NotificationsCast","MainContainer","WindowS","AllPageContainer","CastList","CastItem","Poster","NameText","Cast","actors","useState","pages","setPages","offset","setOffset","useEffect","map","actor","cloneElement","onClick","currentOffset","newOffset","Math","min","style","transform","id","name","photo","src","noPhoto","alt","height","maxOffset","length","max","prototype","PropTypes","isRequired","KEY","movieId","axios","params","api_key","response","fetchMovieCredits","data","setActors","useParams","then","cast","actorsArr","profile_path","push","Notifications"],"sourceRoot":""}